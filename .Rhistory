tmp[i,] <- 1
Amat <- rbind(Amat,c(as.numeric(tmp),rep(0,length(fixedcost))))
constDir <- c(constDir, "==")
bvec <- c(bvec,1)
}
# add a constraint so if a customer is assigned a warehouse, that warehouse is built
for(i in 1:nrow(customer_locations)){
for(j in 1:nrow(warehouse_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,j] <- 1
tmp2 <- rep(0,nrow(warehouse_locations))
tmp2[j] <- -1
Amat <- rbind(Amat,c(tmp,tmp2))
constDir <- c(constDir,"<=")
bvec <- c(bvec,obj[i]-obj[j+(n*m)]) #(obj[i] - obj[j+(n*2)])
}
}
rmod <- Rsymphony_solve_LP(obj, Amat, constDir, bvec,types=typs,verbosity=0,max=FALSE)
obj <- c(as.numeric(tcMat),fixedcost)
typs <- rep("B",length(obj))
# add constraint each customer needs a warehouse
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[1,] <- 1
Amat <- c(as.numeric(tmp),rep(0,length(fixedcost)))
constDir <- "=="
bvec <- 1
for(i in 2:nrow(customer_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,] <- 1
Amat <- rbind(Amat,c(as.numeric(tmp),rep(0,length(fixedcost))))
constDir <- c(constDir, "==")
bvec <- c(bvec,1)
}
# add a constraint so if a customer is assigned a warehouse, that warehouse is built
for(i in 1:nrow(customer_locations)){
for(j in 1:nrow(warehouse_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,j] <- 1
tmp2 <- rep(0,nrow(warehouse_locations))
tmp2[j] <- -1
Amat <- rbind(Amat,c(tmp,tmp2))
constDir <- c(constDir,">=")
bvec <- c(bvec,obj[i]-obj[j+(n*m)]) #(obj[i] - obj[j+(n*2)])
}
}
rmod <- Rsymphony_solve_LP(obj, Amat, constDir, bvec,types=typs,verbosity=0,max=FALSE)
fixedcost
j
obj[j+(n*m)
]
set.seed(1234)
grid_size <- 1000
n <- 10 #100
customer_locations <- data.frame(
id = 1:n,
x = round(runif(n) * grid_size),
y = round(runif(n) * grid_size)
)
m <- 4 #20
warehouse_locations <- data.frame(
id = 1:m,
x = round(runif(m) * grid_size),
y = round(runif(m) * grid_size)
)
fixedcost <- round(rnorm(m, mean = grid_size * 10, sd = grid_size * 5))
transportcost <- function(i, j) {
customer <- customer_locations[i, ]
warehouse <- warehouse_locations[j, ]
round(sqrt((customer$x - warehouse$x)^2 + (customer$y - warehouse$y)^2))
}
transportcost(1, 3)
p <- ggplot(customer_locations, aes(x, y)) +
geom_point() +
geom_point(data = warehouse_locations, color = "red", alpha = 0.5, shape = 17) +
scale_x_continuous(limits = c(0, grid_size)) +
scale_y_continuous(limits = c(0, grid_size)) +
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(), panel.grid = element_blank())
p + ggtitle("Warehouse location problem",
"Black dots are customers. Light red triangles show potential warehouse locations.")
# create objective
tcMat <- matrix(NA, nrow(customer_locations), nrow(warehouse_locations))
for(i in 1:nrow(tcMat)){
for(j in 1:ncol(tcMat)){
tcMat[i, j] <- transportcost(i, j)
}
}
obj <- c(as.numeric(tcMat),fixedcost)
typs <- rep("B",length(obj))
# add constraint each customer needs a warehouse
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[1,] <- 1
Amat <- c(as.numeric(tmp),rep(0,length(fixedcost)))
constDir <- "=="
bvec <- 1
for(i in 2:nrow(customer_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,] <- 1
Amat <- rbind(Amat,c(as.numeric(tmp),rep(0,length(fixedcost))))
constDir <- c(constDir, "==")
bvec <- c(bvec,1)
}
# add a constraint so if a customer is assigned a warehouse, that warehouse is built
for(i in 1:nrow(customer_locations)){
for(j in 1:nrow(warehouse_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,j] <- 1
tmp2 <- rep(0,nrow(warehouse_locations))
tmp2[j] <- 1
Amat <- rbind(Amat,c(tmp,tmp2))
constDir <- c(constDir,">=")
bvec <- c(bvec,obj[j+(n*m)]) #(obj[i] - obj[j+(n*2)])
}
}
rmod <- Rsymphony_solve_LP(obj, Amat, constDir, bvec,types=typs,verbosity=0,max=FALSE)
res$solution
set.seed(1234)
grid_size <- 1000
n <- 10 #100
customer_locations <- data.frame(
id = 1:n,
x = round(runif(n) * grid_size),
y = round(runif(n) * grid_size)
)
m <- 4 #20
warehouse_locations <- data.frame(
id = 1:m,
x = round(runif(m) * grid_size),
y = round(runif(m) * grid_size)
)
fixedcost <- round(rnorm(m, mean = grid_size * 10, sd = grid_size * 5))
transportcost <- function(i, j) {
customer <- customer_locations[i, ]
warehouse <- warehouse_locations[j, ]
round(sqrt((customer$x - warehouse$x)^2 + (customer$y - warehouse$y)^2))
}
transportcost(1, 3)
p <- ggplot(customer_locations, aes(x, y)) +
geom_point() +
geom_point(data = warehouse_locations, color = "red", alpha = 0.5, shape = 17) +
scale_x_continuous(limits = c(0, grid_size)) +
scale_y_continuous(limits = c(0, grid_size)) +
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(), panel.grid = element_blank())
p + ggtitle("Warehouse location problem",
"Black dots are customers. Light red triangles show potential warehouse locations.")
mod <- MIPModel() %>%
add_variable(x[i, j], i=1:n, j=1:m, type="binary") %>%
add_variable(y[j], j=1:m, type="binary") %>%
set_objective(sum_expr(transportcost(i, j) * x[i,j], i=1:n, j=1:m) +
sum_expr(fixedcost[j]*y[j],j=1:m), "min") %>%
add_constraint(sum_expr(x[i, j], j=1:m) == 1, i=1:n) %>%
add_constraint(x[i,j] <= y[j], i=1:n, j=1:m)
mod
res <- solve_model(mod, with_ROI(solver="glpk", verbose=TRUE))
set.seed(1234)
grid_size <- 1000
n <- 10 #100
customer_locations <- data.frame(
id = 1:n,
x = round(runif(n) * grid_size),
y = round(runif(n) * grid_size)
)
m <- 4 #20
warehouse_locations <- data.frame(
id = 1:m,
x = round(runif(m) * grid_size),
y = round(runif(m) * grid_size)
)
fixedcost <- round(rnorm(m, mean = grid_size * 10, sd = grid_size * 5))
transportcost <- function(i, j) {
customer <- customer_locations[i, ]
warehouse <- warehouse_locations[j, ]
round(sqrt((customer$x - warehouse$x)^2 + (customer$y - warehouse$y)^2))
}
transportcost(1, 3)
p <- ggplot(customer_locations, aes(x, y)) +
geom_point() +
geom_point(data = warehouse_locations, color = "red", alpha = 0.5, shape = 17) +
scale_x_continuous(limits = c(0, grid_size)) +
scale_y_continuous(limits = c(0, grid_size)) +
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(), panel.grid = element_blank())
p + ggtitle("Warehouse location problem",
"Black dots are customers. Light red triangles show potential warehouse locations.")
# create objective
tcMat <- matrix(NA, nrow(customer_locations), nrow(warehouse_locations))
for(i in 1:nrow(tcMat)){
for(j in 1:ncol(tcMat)){
tcMat[i, j] <- transportcost(i, j)
}
}
obj <- c(as.numeric(tcMat),fixedcost)
typs <- rep("B",length(obj))
# add constraint each customer needs a warehouse
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[1,] <- 1
Amat <- c(as.numeric(tmp),rep(0,length(fixedcost)))
constDir <- "=="
bvec <- 1
for(i in 2:nrow(customer_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,] <- 1
Amat <- rbind(Amat,c(as.numeric(tmp),rep(0,length(fixedcost))))
constDir <- c(constDir, "==")
bvec <- c(bvec,1)
}
# add a constraint so if a customer is assigned a warehouse, that warehouse is built
for(i in 1:nrow(customer_locations)){
for(j in 1:nrow(warehouse_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,j] <- 1
tmp2 <- rep(0,nrow(warehouse_locations))
tmp2[j] <- 1
Amat <- rbind(Amat,c(tmp,tmp2))
constDir <- c(constDir,">=")
bvec <- c(bvec,obj[j+(n*m)]) #(obj[i] - obj[j+(n*2)])
}
}
rmod <- Rsymphony_solve_LP(obj, Amat, constDir, bvec,types=typs,verbosity=0,max=FALSE)
res$solution%*%Amat
t(res$solution)%*%Amat
Amat%*%res$solution
data.frame(c=Amat%*%res$solution,d=constDir,bvec=bvec)
data.frame(c=Amat%*%(res$solution*obj),d=constDir,bvec=bvec)
data.frame(c=Amat%*%(res$solution),d=constDir,bvec=bvec)
tcMat <- matrix(NA, nrow(customer_locations), nrow(warehouse_locations))
for(i in 1:nrow(tcMat)){
for(j in 1:ncol(tcMat)){
tcMat[i, j] <- transportcost(i, j)
}
}
obj <- c(as.numeric(tcMat),fixedcost)
typs <- rep("B",length(obj))
# add constraint each customer needs a warehouse
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[1,] <- 1
Amat <- c(as.numeric(tmp),rep(0,length(fixedcost)))
constDir <- "=="
bvec <- obj[1]
for(i in 2:nrow(customer_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,] <- 1
Amat <- rbind(Amat,c(as.numeric(tmp),rep(0,length(fixedcost))))
constDir <- c(constDir, "==")
bvec <- c(bvec,1)
}
# add a constraint so if a customer is assigned a warehouse, that warehouse is built
for(i in 1:nrow(customer_locations)){
for(j in 1:nrow(warehouse_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,j] <- 1
tmp2 <- rep(0,nrow(warehouse_locations))
tmp2[j] <- -1
Amat <- rbind(Amat,c(tmp,tmp2))
constDir <- c(constDir,">=")
bvec <- c(bvec,0) #(obj[i] - obj[j+(n*2)])
}
}
data.frame(c=Amat%*%(res$solution),d=constDir,bvec=bvec)
rmod <- Rsymphony_solve_LP(obj, Amat, constDir, bvec,types=typs,verbosity=0,max=FALSE)
obj <- c(as.numeric(tcMat),fixedcost)
typs <- rep("B",length(obj))
# add constraint each customer needs a warehouse
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[1,] <- 1
Amat <- c(as.numeric(tmp),rep(0,length(fixedcost)))
constDir <- "=="
bvec <- obj[1]
for(i in 2:nrow(customer_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,] <- 1
Amat <- rbind(Amat,c(as.numeric(tmp),rep(0,length(fixedcost))))
constDir <- c(constDir, "==")
bvec <- c(bvec,1)
}
# add a constraint so if a customer is assigned a warehouse, that warehouse is built
for(i in 1:nrow(customer_locations)){
for(j in 1:nrow(warehouse_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,j] <- 1
tmp2 <- rep(0,nrow(warehouse_locations))
tmp2[j] <- -1
Amat <- rbind(Amat,c(tmp,tmp2))
constDir <- c(constDir,"<=")
bvec <- c(bvec,0) #(obj[i] - obj[j+(n*2)])
}
}
data.frame(c=Amat%*%(res$solution),d=constDir,bvec=bvec)
rmod <- Rsymphony_solve_LP(obj, Amat, constDir, bvec,types=typs,verbosity=0,max=FALSE)
tcMat <- matrix(NA, nrow(customer_locations), nrow(warehouse_locations))
for(i in 1:nrow(tcMat)){
for(j in 1:ncol(tcMat)){
tcMat[i, j] <- transportcost(i, j)
}
}
obj <- c(as.numeric(tcMat),fixedcost)
typs <- rep("B",length(obj))
# add constraint each customer needs a warehouse
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[1,] <- 1
Amat <- c(as.numeric(tmp),rep(0,length(fixedcost)))
constDir <- "=="
bvec <- obj[1]
for(i in 2:nrow(customer_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,] <- 1
Amat <- rbind(Amat,c(as.numeric(tmp),rep(0,length(fixedcost))))
constDir <- c(constDir, "==")
bvec <- c(bvec,1)
}
# add a constraint so if a customer is assigned a warehouse, that warehouse is built
for(i in 1:nrow(customer_locations)){
for(j in 1:nrow(warehouse_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,j] <- 1
# tmp2 <- rep(0,nrow(warehouse_locations))
# tmp2[j] <- -1
Amat <- rbind(Amat,tmp) #c(tmp,tmp2))
constDir <- c(constDir,"<=")
bvec <- c(bvec,1) #(obj[i] - obj[j+(n*2)])
}
}
data.frame(c=Amat%*%(res$solution),d=constDir,bvec=bvec)
rmod <- Rsymphony_solve_LP(obj, Amat, constDir, bvec,types=typs,verbosity=0,max=FALSE)
# tmp2 <- rep(0,nrow(warehouse_locations))
# tmp2[j] <- 1
obj <- c(as.numeric(tcMat),fixedcost)
typs <- rep("B",length(obj))
# add constraint each customer needs a warehouse
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[1,] <- 1
Amat <- c(as.numeric(tmp),rep(0,length(fixedcost)))
constDir <- "=="
bvec <- obj[1]
for(i in 2:nrow(customer_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,] <- 1
Amat <- rbind(Amat,c(as.numeric(tmp),rep(0,length(fixedcost))))
constDir <- c(constDir, "==")
bvec <- c(bvec,1)
}
# add a constraint so if a customer is assigned a warehouse, that warehouse is built
for(i in 1:nrow(customer_locations)){
for(j in 1:nrow(warehouse_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,j] <- 1
tmp2 <- rep(0,nrow(warehouse_locations))
tmp2[j] <- -1
Amat <- rbind(Amat,c(tmp,tmp2))
constDir <- c(constDir,"<=")
bvec <- c(bvec,0) #(obj[i] - obj[j+(n*2)])
}
}
data.frame(c=Amat%*%(res$solution),d=constDir,bvec=bvec)
rmod <- Rsymphony_solve_LP(obj, Amat, constDir, bvec,types=typs,verbosity=0,max=FALSE)
res$solution[1]
tcMat <- matrix(NA, nrow(customer_locations), nrow(warehouse_locations))
for(i in 1:nrow(tcMat)){
for(j in 1:ncol(tcMat)){
tcMat[i, j] <- transportcost(i, j)
}
}
obj <- c(as.numeric(tcMat),fixedcost)
typs <- rep("B",length(obj))
# add constraint each customer needs a warehouse
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[1,] <- 1
Amat <- c(as.numeric(tmp),rep(0,length(fixedcost)))
constDir <- "=="
bvec <- 1
for(i in 2:nrow(customer_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,] <- 1
Amat <- rbind(Amat,c(as.numeric(tmp),rep(0,length(fixedcost))))
constDir <- c(constDir, "==")
bvec <- c(bvec,1)
}
# add a constraint so if a customer is assigned a warehouse, that warehouse is built
for(i in 1:nrow(customer_locations)){
for(j in 1:nrow(warehouse_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,j] <- 1
tmp2 <- rep(0,nrow(warehouse_locations))
tmp2[j] <- -1
Amat <- rbind(Amat,c(tmp,tmp2))
constDir <- c(constDir,"<=")
bvec <- c(bvec,0) #(obj[i] - obj[j+(n*2)])
}
}
data.frame(c=Amat%*%(res$solution),d=constDir,bvec=bvec)
rmod <- Rsymphony_solve_LP(obj, Amat, constDir, bvec,types=typs,verbosity=0,max=FALSE)
set.seed(1234)
grid_size <- 1000
n <- 100
customer_locations <- data.frame(
id = 1:n,
x = round(runif(n) * grid_size),
y = round(runif(n) * grid_size)
)
m <- 20
warehouse_locations <- data.frame(
id = 1:m,
x = round(runif(m) * grid_size),
y = round(runif(m) * grid_size)
)
fixedcost <- round(rnorm(m, mean = grid_size * 10, sd = grid_size * 5))
transportcost <- function(i, j) {
customer <- customer_locations[i, ]
warehouse <- warehouse_locations[j, ]
round(sqrt((customer$x - warehouse$x)^2 + (customer$y - warehouse$y)^2))
}
transportcost(1, 3)
p <- ggplot(customer_locations, aes(x, y)) +
geom_point() +
geom_point(data = warehouse_locations, color = "red", alpha = 0.5, shape = 17) +
scale_x_continuous(limits = c(0, grid_size)) +
scale_y_continuous(limits = c(0, grid_size)) +
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(), panel.grid = element_blank())
p + ggtitle("Warehouse location problem",
"Black dots are customers. Light red triangles show potential warehouse locations.")
# create objective
tcMat <- matrix(NA, nrow(customer_locations), nrow(warehouse_locations))
for(i in 1:nrow(tcMat)){
for(j in 1:ncol(tcMat)){
tcMat[i, j] <- transportcost(i, j)
}
}
obj <- c(as.numeric(tcMat),fixedcost)
typs <- rep("B",length(obj))
# add constraint each customer needs a warehouse
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[1,] <- 1
Amat <- c(as.numeric(tmp),rep(0,length(fixedcost)))
constDir <- "=="
bvec <- 1
for(i in 2:nrow(customer_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,] <- 1
Amat <- rbind(Amat,c(as.numeric(tmp),rep(0,length(fixedcost))))
constDir <- c(constDir, "==")
bvec <- c(bvec,1)
}
# add a constraint so if a customer is assigned a warehouse, that warehouse is built
for(i in 1:nrow(customer_locations)){
for(j in 1:nrow(warehouse_locations)){
tmp <- matrix(0, nrow(customer_locations), nrow(warehouse_locations))
tmp[i,j] <- 1
tmp2 <- rep(0,nrow(warehouse_locations))
tmp2[j] <- -1
Amat <- rbind(Amat,c(tmp,tmp2))
constDir <- c(constDir,"<=")
bvec <- c(bvec,0) #(obj[i] - obj[j+(n*2)])
}
}
data.frame(c=Amat%*%(res$solution),d=constDir,bvec=bvec)
rmod <- Rsymphony_solve_LP(obj, Amat, constDir, bvec,types=typs,verbosity=0,max=FALSE)
rmod$solution
set.seed(1234)
grid_size <- 1000
n <- 100
customer_locations <- data.frame(
id = 1:n,
x = round(runif(n) * grid_size),
y = round(runif(n) * grid_size)
)
m <- 20
warehouse_locations <- data.frame(
id = 1:m,
x = round(runif(m) * grid_size),
y = round(runif(m) * grid_size)
)
fixedcost <- round(rnorm(m, mean = grid_size * 10, sd = grid_size * 5))
transportcost <- function(i, j) {
customer <- customer_locations[i, ]
warehouse <- warehouse_locations[j, ]
round(sqrt((customer$x - warehouse$x)^2 + (customer$y - warehouse$y)^2))
}
transportcost(1, 3)
p <- ggplot(customer_locations, aes(x, y)) +
geom_point() +
geom_point(data = warehouse_locations, color = "red", alpha = 0.5, shape = 17) +
scale_x_continuous(limits = c(0, grid_size)) +
scale_y_continuous(limits = c(0, grid_size)) +
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(), panel.grid = element_blank())
p + ggtitle("Warehouse location problem",
"Black dots are customers. Light red triangles show potential warehouse locations.")
mod <- MIPModel() %>%
add_variable(x[i, j], i=1:n, j=1:m, type="binary") %>%
add_variable(y[j], j=1:m, type="binary") %>%
set_objective(sum_expr(transportcost(i, j) * x[i,j], i=1:n, j=1:m) +
sum_expr(fixedcost[j]*y[j],j=1:m), "min") %>%
add_constraint(sum_expr(x[i, j], j=1:m) == 1, i=1:n) %>%
add_constraint(x[i,j] <= y[j], i=1:n, j=1:m)
mod
res <- solve_model(mod, with_ROI(solver="glpk", verbose=TRUE))
cbind(res$solution,rmod$solution)
plot(res$solution,"p")
plot(1:length(res$solution),res$solution,"p")
lines(1:length(res$solution),rmod$solution)
exp(-0.06*3/3*(1:3))
1-0.06
0.94^3
exp(0.94^3)
0.94^3
